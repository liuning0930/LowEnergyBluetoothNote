* 三，低功耗蓝牙的体系结构
低功耗蓝牙的体系结构本质上非常简单：
1. 控制器 
   控制器通常是一个物理设备，它能够发送和接收无线电信号，并懂得如何将这些信号翻译成携带信息的数据包。
2. 主机 
   主机通常是一个软件栈，管理两台或多台设备间如何通信以及如何利用无线电同时提供几种不同服务。
3. 应用程序
   实现用户需求
   file:images/BTArch.png
** 控制器
蓝牙控制器同时包含了数字和模拟部分射频器件和负责收发数据包的硬件组成。
*** 物理层
物理层采用2.4GHz无线电，完成间距的传输和接收工作部分。
在低功耗蓝牙中，采用一种称为高斯频移键控(GESK)的调制方式改变无线电波的频率，传输0或1的信息。
*** 链路层
即Link Layer，是BLE中最复杂部分，负责广播、扫描、建立和维护连接，以及确保数据包按照正确的方式组织、正确地计算校验值以及加密序列等。其定义了三个基本概念：信道、报文、过程。
链路层信道分为两种：广播信道和数据信道
广播信道有3个，37.38.39。 未建立连接的设备使用广播信道发送数据。
数据信道有37个， 由一个自适应跳频引擎控制以实现鲁棒性。在数据信道中，可以发送数据，需要时可以重传，还可以加密和认证。
数据包结构：
|    1 |       4 |    1 |    1 | 0~37 |  3 |
| 前导 | 接入地址 | 抱头 | 长度 | 数据  | CRC |
*** HCI层
主机/控制器接口（HCI）的出现 为主机提供了一个与控制器通信的标准接口。允许主机将命令和数据发送到控制器，并且允许控制器将事件和数据发送到主机。主机/控制器接口实际上由两个独立的部分组成：逻辑接口和物理接口。
逻辑接口定义命令、事件及其相关的行为。
物理接口定义了包括命令、事件和数据通过不同的连接技术传输。已知定义的物理接口包括USB、SDIO、两个UART的变种。
因为主机控制器接口存在控制器和主机之内，位于控制器中的部分通常为主机控制器接口的下层部分；位于主机中的部分通常称为主机控制器的上层部分。
** 主机
主机包含复用层、协议和用来实现许多有用而且有趣的过程。
*** L2CAP层 (Logical Link Control and Adaptation Protocol)
逻辑链路控制和适配协议（L2CAP）是低功耗蓝牙的复用层。该层定义了两个最基本的概念：L2CAP信道和L2CAP命令,L2CAP信道是一个双向的数据通道，通向对端设备上的某一特定的协议和规范。每个通道都是独立的，可以有自己的流量控制和与其相关联的配置信息。
低功耗蓝牙只用了两个信道：一个用于信令信道，一个用于安全管理器，还有一个用于属性协议。低功耗蓝牙只有一种帧格式，即B帧，包含两个字节的长度字段和两个字节的的信道识别字符。**如图表，**B帧格式和传统的L2CAP的每个通道使用的基本帧格式一致，在协商使用一些更复杂的帧格式之前，传统L2CAP会一直使用该帧格式。
使用的固定信道：信令信道（signal channel），安全管理器信道（SMP），属性协议信道（ATT）。
报文结构：
|    2 |      2 | 0~65535 |
| 长度 | 信道ID | payload |
*** 属性协议
属性协议定义了访问对端设备上的数据的一组规则。数据存储在属性服务器的”属性“里，供属性客户端执行读写操作。

1. 在低功耗蓝牙的设计之初，使用什么样的协议就成为了一个难题。协议应当十分简单，因为任何的复杂性都会增加额外的成本和所需的存储空间；同时，协议的数量要越少越好。由此，有人认为使用一种单一的、普适的协议在该技术的起步阶段是最佳的选择。不过这个想法并没有完全实现。低功耗蓝牙最后使用了三种协议：逻辑链路控制和适配协议(L2CAP)，安全管理协议(SM)和属性协议(AP)。精简协议：所有的计算乃至世上的大部分事物都围绕着协议运转。大多数的行为有其自身的协议，例如：载入网页用到了超文本传输协议(HTTP)；传输文件用到了文件传输协议(FTP)；安全的登陆另一台电脑，用到了安全外壳协议( SSH)。每一种协议都专攻于它自己的应用场合，试想要是用HTTP协议传输大量的文件，或是用FTP拇议登录电脑，那显然是欠缺效率的。低功耗蓝牙技术和成堆的因特网协议的最大区别在于，低功耗蓝牙技术并不试图传输多样化的数据类型。考虑到不会用来传输大批量的数据或是流媒体音乐，为其开发一种能够处理有限的几种数据类型的协议就可以。这种协议被称为属性协议，是整个蓝牙技术的基石和构造组件。只有理解了属性协议才能理解低功耗蓝牙技术。

2. 数据与状态：还有一个需要理解的概念是：数据( data)与状态（state）这两者有着显著的差别。数据是一个值，它反映了某种客观性质，比如某种测量的结果、读数。数据可以是温度计涮出的房间温度，也可以是供暖系统测出的室内温度；它们都可以被不同的设备测量出来。而状态则反映了某个设备的当前状况或处境：它在做什么、是怎么运作的。设备的状态只有它自己知道，并靠自身维持。温控器测量室温，温度的度数则反映了房间温度的状态。几种常见的状态：低功耗蓝牙用到了三种不同种类的状态类型：外部状态、内部状态与抽象状态。物理测量值反映了物理传感器或者类似接口的当前状态+让我们设想一个浴室里的体重计。

3. 状态机：有趣的是，有限状态机可以明确地使用属性协议和可公开的状态来表示。状态机反映了设备的内部状态，并且有一个或多个外部的辅人接口。这些外部辅人为瞬时命令，根据其他状态信息或行为来改变状态机的状态。这是一个抽象状态，或称为控制点。

4. 服务和规范：从经典蓝牙到低功耗蓝牙，最有趣的转变是服务和规范的体系结构。经典蓝牙里的规范和协议大多定义的是行为与交互指南，它们极其复杂，糅合了许许多多不同的概念。其中，一个最大的问题是这些规范倪定义了两种设备类型，位于链路的两端，再对各自的行为分别定义。粗略地看来，这种做法似乎很有必要：好比体有一部手机和车载（免提）套件，我们必须基于具体应用为其定义各自的工作方式以及交互方式。不幸的是，这也造成了一些麻烦。首当其冲的问题在于，现有的规范对网络中的设备自身的行为定义不够明确。换言之，即便看起来两个设备都定义了各自的行为，但有时候设备自身到底应该怎么做其实并不清楚。低功耗蓝牙使用了一种截然不同的方法来解决上述问题。首先，它采用了纯粹的“客户端一服务器”的结构，针对不同的用例对服务器和客户端的行为单独进行描述。服务器的行为在服务器规格书中定义，而用户的行为在另一规范说明中定义。通过一个属性数据库，服务器规格书定义了需要公开的状态以及通过属性可以实现的行为。将服务器和客户端区分开的最大的好处是，服务器的行为将是预先定义并可知的。它只会做服务说明中定义的“该做”的事情，不会关心客户端将怎样去使用它。这意味着服务可以独立执行单元测试，而与客户端无关；任何客户端可以在必要的时候使用这些服务。举个例子，假设有一种提供时间的服务，某个客户端可用其获取当前时间；另一个客户端周期性地读取当前时间来判断自身的时钟漂移；其他客户端还可以请求其使用GPS接收机以便获得最精确的授时。你瞧，这个时间服务并不关心客户端在做什么，它仅仅提供该服务罢了。

*** 通用属性规范
通用属性规范位于属性协议之上，定义了属性的类型以及其使用方法。它引入了一些概念，包括“特征”、”服务“、服务之间的”包含“关系、特性”描述符“等。
它还定义了一些规程，用来发现服务、特性、服务之间的关系，以及用来读取和写入特性值。

服务间的关系是可以相互组合，实现更为复杂的行为。为了适应复杂的行为和服务之间的关系，服务分为首要服务和次要服务。
*** 通用访问规范
通用属性规范定义了设备如何发现、连接，以及为用户提供有用的信息。还定义了设备之间如何建立长久的关系，成为绑定（binding)。
** 应用层
应用层规约定义了三种类型：特性(characteristic)、服务(service)、规范(profile)。
